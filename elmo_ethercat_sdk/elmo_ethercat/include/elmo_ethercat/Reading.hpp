/*
** Copyright (2019-2020) Robotics Systems Lab - ETH Zurich:
** Jonas Junger, Johannes Pankert, Fabio Dubois, Lennart Nachtigall,
** Markus Staeuble
**
** This file is part of the elmo_ethercat_sdk.
** The elmo_ethercat_sdk is free software: you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation, either version 3 of the License, or
** (at your option) any later version.
**
** The elmo_ethercat_sdk is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with the elmo_ethercat_sdk. If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <chrono>
#include <cstdint>
#include <deque>
#include <elmo/Reading.hpp>

#include <elmo_ethercat/Configuration.hpp>
#include <elmo_ethercat/Error.hpp>

namespace elmo {
namespace ethercat {

/*!
 * An alias for a pair of ErrorType and time point
 */
using ErrorPair = std::pair<ErrorType, ReadingTimePoint>;
using FaultPair = std::pair<uint16_t, ReadingTimePoint>;
using ErrorTimePairDeque = std::deque<std::pair<ErrorType, double>>;
using FaultTimePairDeque = std::deque<std::pair<uint16_t, double>>;

class Reading : public elmo::Reading {
 public:
  /*!
   * returns the age of the last added error in microseconds
   * @return	the age
   */
  double getAgeOfLastErrorInMicroseconds() const;
  /*!
   * returns the age of the last added fault in microseconds
   * @return	the age
   */
  double getAgeOfLastFaultInMicroseconds() const;

  /*!
   * get all stored errors and their age in microseconds
   *
   * @return	deque of all stored errors
   */
  ErrorTimePairDeque getErrors() const;
  /*!
   * get all stored faults and ther age in microseconds
   * @return	deque of all stored faults
   */
  FaultTimePairDeque getFaults() const;

  /*!
   * Returns the last Error that occured
   * @return	The error type of tha last error
   */
  ErrorType getLastError() const;

  /*!
   * Returns the last fault that occured
   * @return	the code of the last occuring fault
   */
  uint16_t getLastFault() const;

  /*!
   * Adds an error type to the reading
   * A time point is set automatically
   * @param errorType	The type of the error
   */
  void addError(ErrorType errorType);
  /*!
   * Adds a fault code to the reading
   * A time point is set automatically
   * @param faultCode	The Code of the fault
   */
  void addFault(uint16_t faultCode);

  /*!
   * The default constructor
   * This is used for Readings generated by the user.
   * No configuration of the capacities and appending equal faults / errors is
   * necessary.
   */
  Reading() = default;

  /*!
   * @brief	Load parameters from Configuration object
   * @param[in] configuration	The Configuration with the requested
   * configuration parameters
   */
  void configureReading(const Configuration& configuration);

  /*!
   * The configuration constructor
   * This is called for readings generated inside of the elmo_ethercat_sdk.
   * @param errorStorageCapacity	the number of errors that are stored
   * @param faultStorageCapacity	the number of faults that are stored
   * @param forceAppendEqualError	true if a new errer shall be appended even
   * though it is equal to the last one
   * @param forceAppendEqualFault	true if a new fault shall be appended even
   * though it is equal to the last one
   */
  Reading(unsigned int errorStorageCapacity, unsigned int faultStorageCapacity, bool forceAppendEqualError, bool forceAppendEqualFault);

 private:
  std::deque<ErrorPair> errors_;
  std::deque<FaultPair> faults_;

  ErrorPair lastError_;
  FaultPair lastFault_;

  mutable bool hasUnreadError_{false};
  mutable bool hasUnreadFault_{false};

  /*!
   * paramaters changeable with a Configuration object
   */
  unsigned int errorStorageCapacity_{25};
  unsigned int faultStorageCapacity_{25};
  bool forceAppendEqualError_{false};
  bool forceAppendEqualFault_{false};
};

}  // namespace ethercat
}  // namespace elmo
